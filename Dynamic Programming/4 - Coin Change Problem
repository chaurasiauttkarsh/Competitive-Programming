You are given an infinite supply of coins of each of denominations D = {D0, D1, D2, D3, ...... Dn-1}. You need to figure out the total number of ways W, in which you can make change for Value V using coins of denominations D.
Note : Return 0, if change isn't possible.
Input Format
Line 1 : Integer n i.e. total number of denominations
Line 2 : N integers i.e. n denomination values
Line 3 : Value V
Output Format
Line 1 :  Number of ways i.e. W
Constraints :
1<=n<=10
1<=V<=1000
Sample Input 1 :
3
1 2 3
4
Sample Output
4
Sample Output Explanation :
Number of ways are - 4 total i.e. (1,1,1,1), (1,1, 2), (1, 3) and (2, 2).

Solution:
int countWaysToMakeChange(int denominations[], int numDenominations, int value)
{
    int **arr = new int*[numDenominations];
    for(int i = 0; i < numDenominations; i++)
        arr[i] = new int[value + 1];
    
    for(int i = 0; i < numDenominations ; i++)
    {
        for(int j = 0; j <= value; j++)
        {
            if(j == 0)
                arr[i][j] = 1;
            else if(i == 0)
                arr[i][j] = (j % denominations[0] == 0) ? 1 : 0;
            else
            {
                if(j < denominations[i])
                    arr[i][j] = arr[i - 1][j];
                else
                    arr[i][j] = arr[i - 1][j] + arr[i][j - denominations[i]];
            }     
        }
    }
    int ans = arr[numDenominations - 1][value];
    for(int i = 0; i < numDenominations; i++)
        delete []arr[i];
    delete []arr;
    return ans;
}

