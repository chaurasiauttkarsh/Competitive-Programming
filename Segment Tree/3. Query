#include <bits/stdc++.h>
using namespace std;

void buildtree_helper(int *arr, int i, int s, int e, int *seg_tree)
{
    // Base Case (s == e)
    if(s == e)
    {
        seg_tree[i] = arr[s];
        return;
    }
    // Finding the value of mid
    int mid = (s + e)/2;
    // Building the left subtree [s, mid]
    buildtree_helper(arr, 2 * i + 1, s, mid, seg_tree);
    // Building the right subtree [mid + 1, e]
    buildtree_helper(arr, 2 * i + 2, mid + 1, e, seg_tree);
    // Filling the value of current node [s, e]
    seg_tree[i] = seg_tree[2 * i + 1] + seg_tree[2 * i + 2];
    
}

void buildtree(int *arr, int N, int *seg_tree)
{
    // buildtree_helper for putting the initial values
    buildtree_helper(arr, 0, 0, N - 1, seg_tree);
}

void update_tree_helper(int *arr, int i, int s, int e, int *seg_tree, int index, int value)
{
    // Base Case
    if(s == e)
    {
        arr[index] = value;
        seg_tree[i] = value;
        return;
    }
    
    // Calculating the mid
    int mid = (s + e)/2;
    // If index is less than equal to mid call on left subtree else on right
    if(mid >= index)
        update_tree_helper(arr, 2 * i + 1, s, mid, seg_tree, index, value);
    else
        update_tree_helper(arr, 2 * i + 2, mid + 1, e, seg_tree, index, value);
        
    // Update the current node
    seg_tree[i] = seg_tree[2 * i + 1] + seg_tree[2 * i + 2];
}

void update_tree(int *arr, int N, int *seg_tree, int index, int value)
{
    update_tree_helper(arr, 0, 0, N - 1, seg_tree, index, value);
}

int query_helper(int *seg_tree,int i, int st, int et, int start, int end)
{
    if(st == start && et == end)
        return seg_tree[i];
    int mid = (st + et)/2;
    if(mid >= end)
        return query_helper(seg_tree, 2 * i + 1, st, mid, start, end);
    if(mid < start)
        return query_helper(seg_tree, 2 * i + 2, mid + 1, et, start, end);
    else 
        return query_helper(seg_tree, 2 * i + 1, st, mid, start, mid) + query_helper(seg_tree, 2 * i + 2, mid + 1, et, mid + 1, end);
}

int query(int *seg_tree, int N, int start, int end)
{
    return query_helper(seg_tree, 0, 0, N - 1, start, end);
}

int main(int argc, char **argv)
{
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    
    // Base structure
    int arr[] = {1, 2, 3, 4, 5};
    int N = sizeof(arr)/sizeof(int);
    int *seg_tree = new int[2 * N - 1];
    
    buildtree(arr, N, seg_tree);
    
    // Printing the final result
    for(int i = 0; i < 2 * N - 1; i++)
        cout << seg_tree[i] << " ";
    cout << endl;
    
    update_tree(arr, N, seg_tree, 2, 8);
    
    // Printing the final result
    for(int i = 0; i < 2 * N - 1; i++)
        cout << seg_tree[i] << " ";
    cout << endl;
    
    cout << "Value from 1 to 4 : " << query(seg_tree, N, 2, 4);
}
