Range Minimum Query
Given an array A of size N, there are two types of queries on this array.
1) q l r: In this query you need to print the minimum in the sub-array A[l:r].
2) u x y: In this query you need to update A[x]=y.
Input:
First line of the test case contains two integers, N and Q, size of array A and number of queries.
Second line contains N space separated integers, elements of A.
Next Q lines contain one of the two queries.
Output:
For each type 1 query, print the minimum element in the sub-array A[l:r].
Contraints:
1≤N,Q,y≤10^5
1≤l,r,x≤N
Sample Input :
5 5
1 5 2 4 3
q 1 5
q 1 3
q 3 5
u 3 6
q 1 5
Sample Output :
1
1
2
1

Solution:
#include<bits/stdc++.h>
using namespace std;

void build_tree_helper(int *arr, int i , int s, int e, int *seg_tree)
{
    if(s == e)
    {
        seg_tree[i] = arr[s];
        return;
    }
    int mid = (s + e)/2;
    build_tree_helper(arr, 2 * i + 1, s, mid, seg_tree);
    build_tree_helper(arr, 2 * i + 2, mid + 1, e, seg_tree);
    seg_tree[i] = min(seg_tree[2 * i + 1], seg_tree[2 * i + 2]);
}

void build_tree(int *arr, int N, int *seg_tree)
{
    build_tree_helper(arr, 0, 0, N - 1, seg_tree);
}

void update_tree_helper(int *arr, int i, int s, int e, int *seg_tree, int index, int value)
{
    if(s == e)
    {
        seg_tree[i] = value;
        arr[index] = value;
        return;
    }
    
    int mid = (s + e) / 2;
    if(index <= mid)
        update_tree_helper(arr, 2 * i + 1, s, mid, seg_tree, index, value);
    else
        update_tree_helper(arr, 2 * i + 2, mid + 1, e, seg_tree, index, value);
    seg_tree[i] = min(seg_tree[2 * i + 1], seg_tree[2 * i + 2]);
}

void update_tree(int *arr, int N, int *seg_tree, int index, int value)
{
    update_tree_helper(arr, 0, 0, N - 1, seg_tree, index, value);
}

int query(int *arr, int i, int st, int et, int *seg_tree, int start, int end)
{
    if(st == start && et == end)
        return seg_tree[i];
    
    int mid = (st + et) / 2;
    if(end <= mid)
        return query(arr, 2 * i + 1, st, mid, seg_tree, start, end);
    if(start > mid)
        return query(arr, 2 * i + 2, mid + 1, et, seg_tree, start, end);
    else
        return min(query(arr, 2 * i + 1, st, mid, seg_tree, start, mid),query(arr, 2 * i + 2, mid + 1, et, seg_tree, mid + 1, end));
}

int query(int *arr, int N, int *seg_tree, int start, int end)
{
    return query(arr, 0, 0, N - 1, seg_tree, start, end);
}

int main(int argc, char **argv) 
{
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    
    int N, Q;
    cin >> N >> Q;
    
    int *arr = new int[N];
    for(int i = 0; i < N; i++)
        cin >> arr[i];
    
    int *seg_tree = new int[4 * N];
    build_tree(arr, N, seg_tree);
    
    for(int i = 0; i < Q; i++)
    {
        char c;
        int a, b;
        cin >> c >> a >> b;
        
        if(c == 'q')
            cout << query(arr, N, seg_tree, a - 1, b - 1) << "\n";
        else
            update_tree(arr, N, seg_tree, a - 1, b);     
    }
    
    delete []arr;
    delete []seg_tree;
}
