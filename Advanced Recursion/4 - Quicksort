Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 

Solution:
void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int * input, int si, int ei)
{
    int pivot = input[ei];
    int i = si - 1;
    for(int j = si; j < ei; j++)
    {
        if(input[j] < pivot)
        {
            i++;
            swap(&input[j], &input[i]);
        }
    }
    swap(&input[ei], &input[i + 1]);
    return i + 1;
}

void quick_sort(int *input, int si, int ei)
{
    if(si < ei)
    {
        int pi = partition(input, si, ei);
        quick_sort(input, si, pi - 1);
        quick_sort(input, pi + 1, ei);
    }
}

void quickSort(int input[], int size) 
{
    quick_sort(input, 0, size - 1);
}
